# Import construction environment
Import('env')

sources = Split("""
src/simple_msgs/ur_joint_cmd.cpp
src/simple_msgs/ur_config_cmd.cpp
src/simple_msgs/ur_state_data.cpp
src/ur_joint_cmd_handler.cpp
src/ur_config_cmd_handler.cpp
src/ur_controller_iface.cpp
src/ur_test_server.cpp
src/ur_test_controller.cpp
src/run_controller.cpp
src/simple_message/byte_array.cpp
src/simple_message/joint_data.cpp
src/simple_message/joint_traj.cpp
src/simple_message/joint_traj_pt.cpp
src/simple_message/joint_traj_pt_full.cpp
src/simple_message/message_handler.cpp
src/simple_message/message_manager.cpp
src/simple_message/ping_handler.cpp
src/simple_message/ping_message.cpp
src/simple_message/robot_status.cpp
src/simple_message/simple_comms_fault_handler.cpp
src/simple_message/simple_message.cpp
src/simple_message/smpl_msg_connection.cpp
src/simple_message/messages/joint_message.cpp
src/simple_message/messages/joint_traj_pt_message.cpp
src/simple_message/messages/joint_traj_pt_full_message.cpp
src/simple_message/messages/robot_status_message.cpp
src/simple_message/socket/simple_socket.cpp
src/simple_message/socket/tcp_client.cpp
src/simple_message/socket/tcp_server.cpp
src/simple_message/socket/tcp_socket.cpp
src/simple_message/socket/udp_client.cpp
src/simple_message/socket/udp_server.cpp
src/simple_message/socket/udp_socket.cpp
""")

#industrial_core_dir = '../../../industrial_core'
#sm_srcs_abs = ""
#for sm_src in simple_message_sources.split('\n'):
#    sm_srcs_abs = sm_srcs_abs + industrial_core_dir + '/' + sm_src + '\n'
#sm_sources = Split(sm_srcs_abs)

#libpath = ['./ur_c_api/1_5/lib']
#libs = ['robotcomm', 'kinematics', 'configuration', 'dev', 'collision', 'm', 'math']
cppdefines = ['NDEBUG', 'LINUXSOCKETS', 'FLOAT64']
ccflags = '-O2 -Wall -m32'
cpppath = ['./include']

###############################################################################

# Build 'example' (link using g++)
VariantDir('build', 'src', duplicate=0)
env = Environment(CC = 'g++',  # link using g++
                  CPPPATH=cpppath,
                  CPPDEFINES=cppdefines)
object_list = env.Object(source=sources)
env.Program(target='#bin/ur_ctrl_server',
            source=object_list,
            #LIBPATH=libpath,
            #LIBS=libs, 
            CCFLAGS=ccflags,
            CPPDEFINES=cppdefines)
