<launch>
  <arg name="monitor_robot_state" default="false"/>
  <arg name="allow_trajectory_execution" default="false"/>

  <include file="$(find ur5_description)/launch/load_pretty.launch" />
  <!--<param name="robot_description" textfile="$(find ur5_description)/urdf/universal_or.dae" /-->
  <param name="robot_description_semantic" textfile="$(find ur5_moveit)/config/ur5.srdf" />

  <node pkg="robot_state_publisher" type="state_publisher" name="rob_st_pub" />
  <node unless="$(arg monitor_robot_state)" pkg="moveit_visualization_ros" name="wall_clock_server" type="fake_time.py" />

  <rosparam if="$(arg allow_trajectory_execution)" command="load" file="$(find ur5_moveit)/config/controllers.yaml" />

  <group ns="robot_description_planning">
    <rosparam command="load" file="$(find ur5_moveit)/config/collision_matrix.yaml"/>
    <rosparam command="load" file="$(find ur5_moveit)/config/joint_limits.yaml"/>
  </group>
  
  <node pkg="moveit_visualization_ros" type="moveit_visualizer" name="moveit_visualizer" output="screen">
    <rosparam command="load" file="$(find ur5_moveit)/config/ompl_planning.yaml"/>
    <rosparam command="load" file="$(find ur5_moveit)/config/kinematics.yaml"/>
    <rosparam if="$(arg allow_trajectory_execution)" file="$(find ur5_moveit)/config/controllers.yaml"/>
    <param name="monitor_robot_state" value="$(arg monitor_robot_state)"/>
    <param name="allow_trajectory_execution" value="$(arg allow_trajectory_execution)"/>
    <param if="$(arg allow_trajectory_execution)" name="manage_controllers" value="false"/>
  </node>

</launch>
